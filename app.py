import base64
exec(base64.b64decode('from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for
import base64
import marshal
import types
import zlib
import codecs
import os
import tempfile
from io import BytesIO
import re

app = Flask(__name__)

class PythonEncoder:
    @staticmethod
    def base64_encode(code):
        """Mã hóa Python code bằng Base64"""
        encoded = base64.b64encode(code.encode('utf-8')).decode('utf-8')
        wrapper = f"""
import base64
exec(base64.b64decode('{encoded}').decode('utf-8'))
"""
        return wrapper.strip()
    
    @staticmethod
    def obfuscate_code(code):
        """Làm rối code Python"""
        obfuscated = code
        replacements = {
            'def ': 'def _0x',
            'class ': 'class _0x',
            'import ': '__import__(',
            'from ': '__import__(',
        }
        
        for old, new in replacements.items():
            if old in obfuscated:
                obfuscated = obfuscated.replace(old, new)
        
        lines = obfuscated.split('\n')
        processed_lines = []
        
        for line in lines:
            if '"' in line or "'" in line:
                encoded_line = repr(line)
                processed_lines.append(f"exec({encoded_line})")
            else:
                processed_lines.append(line)
        
        return '\n'.join(processed_lines)
    
    @staticmethod
    def marshal_encode(code):
        """Mã hóa bằng marshal"""
        try:
            compiled = compile(code, '<string>', 'exec')
            marshaled = marshal.dumps(compiled)
            encoded = base64.b64encode(marshaled).decode('utf-8')
            
            wrapper = f"""
import marshal
import base64
exec(marshal.loads(base64.b64decode('{encoded}')))
"""
            return wrapper.strip()
        except Exception as e:
            return f"# Error: {str(e)}\n{code}"
    
    @staticmethod
    def compress_encode(code):
        """Nén và mã hóa code"""
        compressed = zlib.compress(code.encode('utf-8'))
        encoded = base64.b64encode(compressed).decode('utf-8')
        
        wrapper = f"""
import zlib
import base64
exec(zlib.decompress(base64.b64decode('{encoded}')).decode('utf-8'))
"""
        return wrapper.strip()
    
    @staticmethod
    def hex_encode(code):
        """Mã hóa bằng hex"""
        hex_encoded = code.encode('utf-8').hex()
        wrapper = f"""
exec(bytes.fromhex('{hex_encoded}').decode('utf-8'))
"""
        return wrapper.strip()
    
    @staticmethod
    def rot13_encode(code):
        """Mã hóa bằng ROT13"""
        encoded = codecs.encode(code, 'rot13')
        wrapper = f"""
import codecs
exec(codecs.decode('''{encoded}''', 'rot13'))
"""
        return wrapper.strip()
    
    @staticmethod
    def advanced_encode(code):
        """Mã hóa nâng cao nhiều lớp"""
        # Layer 1: Base64
        layer1 = base64.b64encode(code.encode('utf-8')).decode('utf-8')
        # Layer 2: Hex
        layer2 = layer1.encode('utf-8').hex()
        # Layer 3: ROT13
        layer3 = codecs.encode(layer2, 'rot13')
        
        wrapper = f"""
import base64, codecs
exec(base64.b64decode(bytes.fromhex(codecs.decode('{layer3}', 'rot13')).decode('utf-8')).decode('utf-8'))
"""
        return wrapper.strip()

def is_mobile_device(user_agent):
    """Detect if the request is from a mobile device"""
    mobile_patterns = [
        r'Mobile', r'Android', r'iPhone', r'iPad', r'iPod',
        r'BlackBerry', r'Windows Phone', r'Opera Mini',
        r'IEMobile', r'Mobile Safari'
    ]
    
    for pattern in mobile_patterns:
        if re.search(pattern, user_agent, re.IGNORECASE):
            return True
    return False

@app.route('/')
def index():
    user_agent = request.headers.get('User-Agent', '')
    
    if is_mobile_device(user_agent):
        return render_template('mobile.html')
    else:
        return render_template('index.html')

@app.route('/mobile')
def mobile():
    return render_template('mobile.html')

@app.route('/desktop')
def desktop():
    return render_template('index.html')

@app.route('/encode', methods=['POST'])
def encode_code():
    try:
        data = request.get_json()
        code = data.get('code', '')
        method = data.get('method', 'base64')
        
        encoder = PythonEncoder()
        
        if method == 'base64':
            encoded = encoder.base64_encode(code)
        elif method == 'marshal':
            encoded = encoder.marshal_encode(code)
        elif method == 'compress':
            encoded = encoder.compress_encode(code)
        elif method == 'hex':
            encoded = encoder.hex_encode(code)
        elif method == 'rot13':
            encoded = encoder.rot13_encode(code)
        elif method == 'obfuscate':
            encoded = encoder.obfuscate_code(code)
        elif method == 'advanced':
            encoded = encoder.advanced_encode(code)
        else:
            encoded = encoder.base64_encode(code)
        
        return jsonify({
            'success': True,
            'encoded_code': encoded,
            'method': method,
            'original_size': len(code),
            'encoded_size': len(encoded),
            'compression_ratio': round((len(encoded) / len(code)) * 100, 2) if len(code) > 0 else 0
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/download', methods=['POST'])
def download_encoded():
    try:
        data = request.get_json()
        encoded_code = data.get('encoded_code', '')
        filename = data.get('filename', 'encoded_code.py')
        
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False)
        temp_file.write(encoded_code)
        temp_file.close()
        
        return send_file(temp_file.name, as_attachment=True, download_name=filename)
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)').decode('utf-8'))